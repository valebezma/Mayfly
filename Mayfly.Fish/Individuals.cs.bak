using Mayfly.FisheryStock;
using Mayfly.FisheryStock.Controls;
using Mayfly.TaskDialogs;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Globalization;
using System.Linq;
using System.Resources;
using System.Windows.Forms;

namespace Mayfly.Fish
{
    public partial class Individuals : Form
    {
        #region Properties

        public Data.LogRow LogRow;

        private Data Data { get; set; }

        public bool IsChanged;

        public bool ChangesWereMade;

        public DataGridViewRow LogLine;

        public double Mass
        {
            get
            {
                if (numericUpDownMass.Enabled)
                {
                    return (double)numericUpDownMass.Value;
                }
                else
                {
                    return double.NaN;
                }
            }

            set
            {
                if (double.IsNaN(value))
                {
                    numericUpDownMass.Enabled = false;
                }
                else
                {
                    numericUpDownMass.Enabled = true;
                    numericUpDownMass.Value = (decimal)value;
                }
            }
        }

        public double DetailedMass
        {
            get
            {
                if (stratifiedSample.TotalCount > 0)
                {
                    return double.NaN;
                }

                double result = 0;

                foreach (DataGridViewRow gridRow in spreadSheetLog.Rows)
                {
                    if (gridRow.IsNewRow) continue;

                    if (gridRow.Cells[ColumnMass.Index].Value == null) continue;

                    if (gridRow.Cells[ColumnMass.Index].Value is double)
                    {
                        result += (double)gridRow.Cells[ColumnMass.Index].Value;
                    }
                }

                return Math.Round(result, 3);
            }
        }

        public int Quantity
        {
            get
            {
                return (int)numericUpDownQuantity.Value;
            }

            set
            {
                numericUpDownQuantity.Value = (decimal)value;
            }
        }

        public int DetailedQuantity
        {
            get
            {
                return spreadSheetLog.RowCount - 1 + stratifiedSample.TotalCount;
            }
        }

        public bool IsLenghtRangeShown;

        private bool IsThereUnsavedIndividuals
        {
            get
            {
                foreach (DataGridViewRow gridRow in spreadSheetLog.Rows)
                {
                    if (gridRow.IsNewRow) continue;

                    if (gridRow.Visible)
                    {
                        if (gridRow.Cells[ColumnID.Index].Value == null)
                        {
                            return true;
                        }
                    }
                }

                return false;
            }
        }

        private DataGridViewColumn SelectedColumn;

        public string[] AdditionalVariables
        {
            get
            {
                List<string> result = new List<string>(UserSettings.AddtVariables);
                foreach (DataGridViewColumn gridColumn in AdditionalColumns)
                {
                    if (!result.Contains(gridColumn.HeaderText))
                    {
                        result.Add(gridColumn.HeaderText);
                    }
                }
                return result.ToArray();
            }
        }

        public string[] CurrentVariables
        {
            get
            {
                List<string> result = new List<string>();

                foreach (DataGridViewColumn gridColumn in AdditionalColumns)
                {
                    if (gridColumn.Visible)
                    {
                        result.Add(gridColumn.Name);
                    }
                }
                return result.ToArray();
            }
        }

        public DataGridViewColumn[] AdditionalColumns
        {
            get
            {
                List<DataGridViewColumn> result = new List<DataGridViewColumn>();

                foreach (DataGridViewColumn gridColumn in spreadSheetLog.Columns)
                {
                    if (gridColumn == ColumnID) continue;

                    if (gridColumn == ColumnLength) continue;

                    if (gridColumn == ColumnMass) continue;

                    if (gridColumn == ColumnSomaticMass) continue;

                    if (gridColumn == ColumnAge) continue;

                    if (gridColumn == ColumnSex) continue;

                    if (gridColumn == ColumnMaturity) continue;

                    if (gridColumn == ColumnGonadMass) continue;

                    if (gridColumn == ColumnGonadSampleMass) continue;

                    if (gridColumn == ColumnGonadSample) continue;

                    if (gridColumn == ColumnEggSize) continue;

                    if (gridColumn == ColumnComments) continue;

                    result.Add(gridColumn);
                }

                return result.ToArray();
            }
        }

        private double PrevDetailedMass;

        private int PrevDetailedQuantity;

        #endregion

        public Individuals(Data.LogRow logRow)
        {
            InitializeComponent();

            LogRow = logRow;
            Data = (Data)LogRow.Table.DataSet;
            if (logRow.IsSpcIDNull())
            {
                Text = string.Format(FisheryStock.Resources.Interface.IndLog,
                    Species.Resources.Interface.UnidentifiedTitle);
            }
            else
            {
                Text = string.Format(FisheryStock.Resources.Interface.IndLog,
                    logRow.SpeciesRow.Species);
            }

            ColumnLength.ValueType = typeof(double);
            ColumnMass.ValueType = typeof(double);
            ColumnSomaticMass.ValueType = typeof(double);
            ColumnAge.ValueType = typeof(Age);
            ColumnSex.ValueType = typeof(Sex);
            ColumnMaturity.ValueType = typeof(int);
            ColumnGonadMass.ValueType = typeof(double);
            ColumnGonadSampleMass.ValueType = typeof(double);
            ColumnGonadSample.ValueType = typeof(int);
            ColumnEggSize.ValueType = typeof(double);
            ColumnComments.ValueType = typeof(string);

            if (!LogRow.IsMassNull())
            {
                Mass = LogRow.Mass;
            }

            if (!LogRow.IsQuantityNull())
            {
                Quantity = LogRow.Quantity;
            }

            if (!LogRow.IsCommentsNull())
            {
                textBoxComments.Text = LogRow.Comments;
            }

            AddVariableMenuItems();
            InsertCurrentVariableColumns();

            Data.IndividualRow[] individualRows = LogRow.GetIndividualRows();

            if (individualRows.Length == 0)
            {
                if (!LogRow.IsQuantityNull() && LogRow.Quantity == 1 && !LogRow.IsMassNull())
                {
                    int i = spreadSheetLog.Rows.Add();
                    spreadSheetLog[ColumnMass.Index, i].Value = LogRow.Mass;
                    spreadSheetLog.ClearSelection();
                    spreadSheetLog.CurrentCell = spreadSheetLog[ColumnMass.Index + 1, i];

                    ChangesWereMade = true;
                }
            }
            else
            {
                foreach (Data.VariableRow variableRow in Data.Variable.Rows)
                {
                    spreadSheetLog.InsertColumn(variableRow.Variable);
                }

                foreach (Data.IndividualRow individualRow in individualRows)
                {
                    InsertIndividualRow(individualRow);
                }

                foreach (DataGridViewColumn gridColumn in AdditionalColumns)
                {
                    if (spreadSheetLog.IsColumnEmpty(gridColumn))
                    {
                        Width -= gridColumn.Width;
                        spreadSheetLog.Columns.Remove(gridColumn);
                    }
                }
            }

            Data.StratifiedRow[] stratifiedRows = LogRow.GetStratifiedRows();

            if (stratifiedRows.Length > 0)
            {
                double MinLengthClass = Data.LengthMinStrat(LogRow);
                double MaxLengthClass = Data.LengthMaxStrat(LogRow);

                stratifiedSample.Reset(MinLengthClass, MaxLengthClass, LogRow.Interval);

                foreach (Data.StratifiedRow stratifiedRow in stratifiedRows)
                {
                    stratifiedSample.FindCounter(stratifiedRow.Class).Count = stratifiedRow.Count;
                }

                ShowLengthRange();
            }

            numericUpDownMass.Enabled = numericUpDownQuantity.Enabled = !UserSettings.FixTotals;

            spreadSheetLog.CurrentCell = spreadSheetLog.FirstClearCell();

            UpdateTotals();
            IsChanged = false;
        }

        #region Methods

        private void UpdateTotals()
        {
            double MassDifference = DetailedMass - PrevDetailedMass;
            int QuantityDifference = DetailedQuantity - PrevDetailedQuantity;

            PrevDetailedMass = DetailedMass;
            PrevDetailedQuantity = DetailedQuantity;

            if (UserSettings.AutoIncreaseBio)
            {
                if (!double.IsNaN(DetailedMass) && DetailedMass > Mass * 1000)
                {
                    Mass = DetailedMass / 1000;
                }

                if (DetailedQuantity > Quantity)
                {
                    Quantity = DetailedQuantity;
                }
            }
            else
            {
                pictureBoxWarningQuantity.Visible = (DetailedQuantity > Quantity);
                pictureBoxWarningMass.Visible = (DetailedMass > (1000 * Mass));
            }

            if (UserSettings.AutoDecreaseBio && MassDifference < 0)
            {
                Mass += (MassDifference / 1000);
            }

            if (UserSettings.AutoDecreaseBio && QuantityDifference < 0)
            {
                Quantity += QuantityDifference;
            }
        }

        public EventHandler Updater;

        private void ClearEmptyRows()
        {
            foreach (DataGridViewRow Row in spreadSheetLog.Rows)
            {
                if (Row.IsNewRow) continue;

                if (spreadSheetLog.IsRowEmpty(Row))
                {
                    Clear(Row);
                    spreadSheetLog.Rows.Remove(Row);
                }
            }
        }

        private void Clear(DataGridViewRow gridRow)
        {
            if (gridRow.Cells[ColumnID.Index].Value != null)
            {
                Data.IndividualRow individualRow =
                    Data.Individual.FindByID(
                    (int)gridRow.Cells[ColumnID.Index].Value);

                if (individualRow != null)
                {
                    individualRow.Delete();
                }
            }
        }

        private void Clear(DataGridViewColumn gridColumn)
        {
            for (int i = 0; i < spreadSheetLog.RowCount; i++)
            {
                spreadSheetLog[gridColumn.Index, i].Value = null;
            }
        }

        private void ShowLengthRange()
        {
            if (!IsLenghtRangeShown)
            {
                stratifiedSample.Visible = true;
                spreadSheetLog.Height -= stratifiedSample.Height;
                IsLenghtRangeShown = true;
            }
        }

        private void HideLengthRange()
        {
            if (IsLenghtRangeShown)
            {
                stratifiedSample.Visible = false;
                spreadSheetLog.Height += stratifiedSample.Height;
                IsLenghtRangeShown = false;
                stratifiedSample.Reset();
            }
        }

        private void AddVariableMenuItems()
        {
            while (contextMenuStripAdd.Items.Count > 9)
            {
                contextMenuStripAdd.Items.RemoveAt(7);
            }

            if (UserSettings.AddtVariables != null)
            {
                foreach (string addtVar in UserSettings.AddtVariables)
                {
                    ToolStripMenuItem newVarMenu = new ToolStripMenuItem(addtVar);
                    newVarMenu.Click += new EventHandler(CustomVar_Click);
                    contextMenuStripAdd.Items.Insert(7, newVarMenu);
                }
            }
        }

        private void InsertCurrentVariableColumns()
        {
            if (UserSettings.CurrentVariables != null)
            {
                foreach (string currVar in UserSettings.CurrentVariables)
                {
                    spreadSheetLog.InsertColumn(currVar);
                }
            }
        }

        private void SaveData()
        {
            foreach (DataGridViewRow gridRow in spreadSheetLog.Rows)
            {
                if (gridRow.IsNewRow)
                {
                    continue;
                }

                SaveIndividualRow(gridRow);
            }

            Data.Individual.AcceptChanges();

            if (stratifiedSample.Visible)
            {
                LogRow.Interval = stratifiedSample.Interval;

                foreach (SizeGroup sizeGroup in stratifiedSample.SizeGroups)
                {
                    Data.StratifiedRow stratifiedRow = Data.Stratified.FindByLogIDClass(LogRow.ID, sizeGroup.Length);
                    if (stratifiedRow == null)
                    {
                        if (sizeGroup.Count > 0)
                        {
                            Data.Stratified.AddStratifiedRow(LogRow, sizeGroup.Length, sizeGroup.Count);
                        }
                    }
                    else
                    {
                        if (sizeGroup.Count == 0)
                        {
                            stratifiedRow.Delete();
                        }
                        else
                        {
                            stratifiedRow.Count = sizeGroup.Count;
                        }
                    }
                }
            }

            Data.Stratified.AcceptChanges();

            UpdateLogRow();

            IsChanged = false;
        }

        private void UpdateLogRow()
        {
            if (Quantity > 0)
            {
                LogRow.Quantity = Quantity;
                LogLine.Cells["ColumnQuantity"].Value = LogRow.Quantity;
            }
            else
            {
                LogRow.SetQuantityNull();
                LogLine.Cells["ColumnQuantity"].Value = null;
            }

            if (!double.IsNaN(Mass) && Mass > 0)
            {
                LogRow.Mass = Mass;
                LogLine.Cells["ColumnMass"].Value = LogRow.Mass;
            }
            else
            {
                LogRow.SetMassNull();
                LogLine.Cells["ColumnMass"].Value = null;
            }

            if (textBoxComments.Text == string.Empty)
            {
                LogRow.SetCommentsNull();
                LogLine.Cells["ColumnSpecies"].ToolTipText = string.Empty;
            }
            else
            {
                LogRow.Comments = textBoxComments.Text;
                LogLine.Cells["ColumnSpecies"].ToolTipText = Mayfly.Service.InsertBreaks(
                    LogRow.Comments, 35);
            }


            if (LogLine != null)
            {
                if (LogLine.DataGridView.FindForm() is Card)
                {
                    ((Card)LogLine.DataGridView.FindForm()).UpdateStatus();
                }

                if (Updater != null)
                {
                    Updater.Invoke(LogLine, new EventArgs());
                }
            }
        }

        private void OpenIndividual(DataGridViewRow gridRow)
        {
            Individual individual = new Individual(IndividualRow(gridRow));
            individual.LogLine = gridRow;
            individual.Location = Mayfly.Service.FriendlyDesktopLocation(gridRow, individual.Size);
            individual.Show();
        }

        private bool IsAlreadySaved(DataGridViewRow gridRow)
        {
            return gridRow.Cells[ColumnID.Index].Value == null;
        }

        private Data.IndividualRow IndividualRow(DataGridViewRow gridRow)
        {
            return IndividualRow(Data, LogRow, gridRow);
        }

        private Data.IndividualRow IndividualRow(Data data, Data.LogRow logRow, DataGridViewRow gridRow)
        {
            Data.IndividualRow individualRow;

            if (gridRow.Cells[ColumnID.Index].Value != null)
            {
                individualRow = data.Individual.FindByID((int)gridRow.Cells[ColumnID.Index].Value);
                if (individualRow != null)
                {
                    goto Saving;
                }
            }

            individualRow = data.Individual.NewIndividualRow();
            individualRow.LogRow = logRow;

        Saving:

            if (gridRow.Cells[ColumnLength.Index].Value == null)
            {
                individualRow.SetLengthNull();
            }
            else
            {
                individualRow.Length = (double)gridRow.Cells[ColumnLength.Index].Value;
            }

            if (gridRow.Cells[ColumnMass.Index].Value == null)
            {
                individualRow.SetMassNull();
            }
            else
            {
                individualRow.Mass = (double)gridRow.Cells[ColumnMass.Index].Value;
            }

            if (gridRow.Cells[ColumnSomaticMass.Index].Value == null)
            {
                individualRow.SetSomaticMassNull();
            }
            else
            {
                individualRow.SomaticMass = (double)gridRow.Cells[ColumnSomaticMass.Index].Value;
            }

            if (gridRow.Cells[ColumnAge.Index].Value == null)
            {
                individualRow.SetAgeNull();
            }
            else
            {
                individualRow.Age = ((Age)gridRow.Cells[ColumnAge.Index].Value).Value;
            }

            if (gridRow.Cells[ColumnSex.Index].Value == null)
            {
                individualRow.SetSexNull();
            }
            else
            {
                individualRow.Sex = ((Sex)gridRow.Cells[ColumnSex.Index].Value).Value;
            }

            if (gridRow.Cells[ColumnMaturity.Index].Value == null)
            {
                individualRow.SetMaturityNull();
            }
            else
            {
                individualRow.Maturity = (int)gridRow.Cells[ColumnMaturity.Index].Value;
            }

            if (gridRow.Cells[ColumnGonadMass.Index].Value == null)
            {
                individualRow.SetGonadMassNull();
            }
            else
            {
                individualRow.GonadMass = (double)gridRow.Cells[ColumnGonadMass.Index].Value;
            }

            if (gridRow.Cells[ColumnGonadSampleMass.Index].Value == null)
            {
                individualRow.SetGonadSampleMassNull();
            }
            else
            {
                individualRow.GonadSampleMass = (double)gridRow.Cells[ColumnGonadSampleMass.Index].Value;
            }

            if (gridRow.Cells[ColumnGonadSample.Index].Value == null)
            {
                individualRow.SetGonadSampleNull();
            }
            else
            {
                individualRow.GonadSample = (int)gridRow.Cells[ColumnGonadSample.Index].Value;
            }

            if (gridRow.Cells[ColumnEggSize.Index].Value == null)
            {
                individualRow.SetEggSizeNull();
            }
            else
            {
                individualRow.EggSize = (double)gridRow.Cells[ColumnEggSize.Index].Value;
            }

            if (gridRow.Cells[ColumnComments.Index].Value == null)
            {
                individualRow.SetCommentsNull();
            }
            else
            {
                individualRow.Comments = (string)gridRow.Cells[ColumnComments.Index].Value;
            }

            SaveAddtValues(data, individualRow, gridRow);

            return individualRow;
        }

        private Data.IndividualRow SaveIndividualRow(DataGridViewRow gridRow)
        {
            return SaveIndividualRow(Data, LogRow, gridRow);
        }

        private Data.IndividualRow SaveIndividualRow(Data data, Data.LogRow logRow, DataGridViewRow gridRow)
        {
            Data.IndividualRow individualRow = IndividualRow(data, logRow, gridRow);

            if (data.Individual.Rows.IndexOf(individualRow) == -1)
            {
                data.Individual.AddIndividualRow(individualRow);
            }

            if (data == Data)
            {
                gridRow.Cells[ColumnID.Index].Value = individualRow.ID;
                gridRow.HeaderCell.Value = Math.Abs(individualRow.ID);
            }

            return individualRow;
        }

        private void SaveAddtValues(Data data, Data.IndividualRow individualRow, DataGridViewRow gridRow)
        {
            foreach (DataGridViewColumn gridColumn in AdditionalColumns)
            {
                if (gridRow.Cells[gridColumn.Index].Value == null)
                {
                    Data.VariableRow CurrentVarRow = data.Variable.FindByVarName(gridColumn.HeaderText);

                    if (CurrentVarRow == null) continue;

                    Data.ValueRow ValueRow = data.Value.FindByIndIDVarID(individualRow.ID, CurrentVarRow.ID);

                    if (ValueRow == null) continue;

                    ValueRow.Delete();
                }
                else
                {
                    Data.VariableRow variableRow = data.Variable.FindByVarName(gridColumn.HeaderText);

                    if (variableRow == null)
                    {
                        variableRow = data.Variable.AddVariableRow(gridColumn.HeaderText);
                    }

                    Data.ValueRow valueRow = data.Value.FindByIndIDVarID(individualRow.ID, variableRow.ID);

                    if (valueRow == null)
                    {
                        data.Value.AddValueRow(individualRow, variableRow, (double)gridRow.Cells[gridColumn.Index].Value);
                    }
                    else
                    {
                        valueRow.Value = (double)gridRow.Cells[gridColumn.Index].Value;
                    }
                }
            }
        }

        private DataGridViewRow InsertIndividualRow(Data.IndividualRow individualRow)
        {
            DataGridViewRow gridRow = new DataGridViewRow();
            gridRow.CreateCells(spreadSheetLog);
            gridRow.HeaderCell.Value = Math.Abs(individualRow.ID);

            gridRow.Cells[ColumnID.Index].Value = individualRow.ID;

            if (individualRow.IsLengthNull()) { }
            else
            {
                gridRow.Cells[ColumnLength.Index].Value = individualRow.Length;
            }

            if (individualRow.IsMassNull()) { }
            else
            {
                gridRow.Cells[ColumnMass.Index].Value = individualRow.Mass;
            }

            if (individualRow.IsSomaticMassNull()) { }
            else
            {
                gridRow.Cells[ColumnSomaticMass.Index].Value = individualRow.SomaticMass;
            }

            if (individualRow.IsAgeNull()) { }
            else
            {
                gridRow.Cells[ColumnAge.Index].Value = new Age(individualRow.Age);
            }

            if (individualRow.IsSexNull()) { }
            else
            {
                gridRow.Cells[ColumnSex.Index].Value = new Sex(individualRow.Sex);
            }

            if (individualRow.IsMaturityNull()) { }
            else
            {
                gridRow.Cells[ColumnMaturity.Index].Value = individualRow.Maturity;
            }

            if (individualRow.IsGonadMassNull()) { }
            else
            {
                gridRow.Cells[ColumnGonadMass.Index].Value = individualRow.GonadMass;
            }

            if (individualRow.IsGonadSampleMassNull()) { }
            else
            {
                gridRow.Cells[ColumnGonadSampleMass.Index].Value = individualRow.GonadSampleMass;
            }

            if (individualRow.IsGonadSampleNull()) { }
            else
            {
                gridRow.Cells[ColumnGonadSample.Index].Value = individualRow.GonadSample;
            }

            if (individualRow.IsEggSizeNull()) { }
            else
            {
                gridRow.Cells[ColumnEggSize.Index].Value = individualRow.EggSize;
            }

            if (individualRow.IsCommentsNull()) { }
            else
            {
                gridRow.Cells[ColumnComments.Index].Value = individualRow.Comments;
            }

            foreach (Data.ValueRow valueRow in individualRow.GetValueRows())
            {
                if (!valueRow.IsValueNull())
                {
                    gridRow.Cells[spreadSheetLog.GetColumn(valueRow.VariableRow.Variable).Index].Value = valueRow.Value;
                }
            }

            spreadSheetLog.Rows.Add(gridRow);

            return gridRow;
        }

        #endregion

        #region Interface logics

        #region Value logics

        private void Value_KeyPress(object sender, KeyPressEventArgs e)
        {
            Mayfly.Service.HandleInput((Control)sender, e, typeof(double));
        }

        private void contextMenuStripValue_Opening(object sender, CancelEventArgs e)
        {
            ToolStripMenuItemPasteValue.Enabled = Clipboard.ContainsText();
        }

        private void ToolStripMenuItemClearValue_Click(object sender, EventArgs e)
        {
            foreach (DataGridViewCell gridCell in spreadSheetLog.SelectedCells)
            {
                gridCell.Value = null;
            }
        }

        private void ToolStripMenuItemCopyValue_Click(object sender, EventArgs e)
        {
            Clipboard.SetDataObject(spreadSheetLog.GetClipboardContent());
        }

        private void ToolStripMenuItemPasteValue_Click(object sender, EventArgs e)
        {
            spreadSheetLog.PasteToGrid();
        }

        private void ToolStripMenuItemCalc_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("calc");
        }

        #endregion

        #region Add menu

        private void buttonAdd_Click(object sender, EventArgs e)
        {
            contextMenuStripAdd.Show(buttonAdd, new Point(0, 0), ToolStripDropDownDirection.AboveRight);
        }

        private void ToolStripMenuItemStratifiedSample_Click(object sender, EventArgs e)
        {
            double minLengthClass = double.MaxValue;
            double maxLengthClass = double.MinValue;

            for (int i = 0; i < spreadSheetLog.RowCount - 1; i++)
            {
                if (!(spreadSheetLog[ColumnLength.Name, i].Value == null ||
                    spreadSheetLog[ColumnLength.Name, i].Value.ToString() == string.Empty))
                {
                    double currentLength = (double)spreadSheetLog[ColumnLength.Name, i].Value;
                    if (currentLength < minLengthClass)
                    {
                        minLengthClass = currentLength;
                    }

                    if (currentLength > maxLengthClass)
                    {
                        maxLengthClass = currentLength;
                    }
                }
            }

            if (inputDialogStratifiedInterval.ShowDialog(this) == System.Windows.Forms.DialogResult.OK)
            {
                double interval = double.Parse(inputDialogStratifiedInterval.Input);
                stratifiedSample.Interval = interval;

                if (minLengthClass != double.MaxValue && maxLengthClass != double.MinValue)
                {
                    minLengthClass = Math.Floor(minLengthClass / stratifiedSample.Interval) * stratifiedSample.Interval;
                    maxLengthClass = Math.Floor(maxLengthClass / stratifiedSample.Interval) * stratifiedSample.Interval + stratifiedSample.Interval;

                    stratifiedSample.Reset(minLengthClass, maxLengthClass, interval);
                }
                else
                {
                    //lengthRange1.Reset();
                }

                ShowLengthRange();
            }
        }

        private void ToolStripMenuItemNewVar_Click(object sender, EventArgs e)
        {
            spreadSheetLog.InsertColumn();
        }

        private void CustomVar_Click(object sender, EventArgs e)
        {
            spreadSheetLog.InsertColumn(((ToolStripMenuItem)sender).Text);
            spreadSheetLog.CurrentCell = spreadSheetLog[((ToolStripMenuItem)sender).Text, spreadSheetLog.CurrentRow.Index];
            spreadSheetLog.Focus();
        }

        private void somaticWeightGToolStripMenuItem_Click(object sender, EventArgs e)
        {
            spreadSheetLog.EnsureVisible(ColumnSomaticMass);
        }

        private void gonadWeightGToolStripMenuItem_Click(object sender, EventArgs e)
        {
            spreadSheetLog.EnsureVisible(ColumnGonadMass);
        }

        private void fertilitySampleWeightToolStripMenuItem_Click(object sender, EventArgs e)
        {
            spreadSheetLog.EnsureVisible(ColumnGonadSampleMass);
        }

        private void gametesNumberInSampleToolStripMenuItem_Click(object sender, EventArgs e)
        {
            spreadSheetLog.EnsureVisible(ColumnGonadSample);
        }

        private void meanEggDiameterΜmToolStripMenuItem_Click(object sender, EventArgs e)
        {
            spreadSheetLog.EnsureVisible(ColumnEggSize);
        }

        #endregion

        #region Totals logics

        private void numericUpDownQuantity_ValueChanged(object sender, EventArgs e)
        {
            pictureBoxWarningQuantity.Visible = (DetailedQuantity > Quantity);
            IsChanged = true;
        }

        private void numericUpDownMass_ValueChanged(object sender, EventArgs e)
        {
            pictureBoxWarningMass.Visible = (DetailedMass > (Mass * 1000));
            IsChanged = true;
        }

        private void pictureBoxWarningQuantity_DoubleClick(object sender, EventArgs e)
        {
            Quantity = DetailedQuantity;
            IsChanged = true;
        }

        private void pictureBoxWarningMass_DoubleClick(object sender, EventArgs e)
        {
            Mass = DetailedMass / 1000;
            IsChanged = true;
        }

        private void pictureBoxWarningM_MouseHover(object sender, EventArgs e)
        {
            toolTipAttention.ToolTipTitle = FisheryStock.Resources.Interface.MassInequal;
            toolTipAttention.Show(string.Format(Resources.Interface.MassSetEqual,
                DetailedMass, 1000 * Mass), numericUpDownMass, 0, numericUpDownMass.Height);
        }

        private void pictureBoxWarningM_MouseLeave(object sender, EventArgs e)
        {
            toolTipAttention.Hide(numericUpDownMass);
        }

        private void pictureBoxWarningQ_MouseHover(object sender, EventArgs e)
        {
            toolTipAttention.ToolTipTitle = FisheryStock.Resources.Interface.QuantityInequal;
            toolTipAttention.Show(string.Format(FisheryStock.Resources.Interface.QuantitySetEqual,
                DetailedQuantity, Quantity), numericUpDownQuantity, 0, numericUpDownQuantity.Height);
        }

        private void pictureBoxWarningQ_MouseLeave(object sender, EventArgs e)
        {
            toolTipAttention.Hide(numericUpDownQuantity);
        }

        #endregion

        #region Grid Log logics

        private void spreadSheetLog_CellEnter(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex == ColumnSex.Index)
            {
                InputLanguage.CurrentInputLanguage = InputLanguage.FromCulture(CultureInfo.InvariantCulture);
            }
            else
            {
                InputLanguage.CurrentInputLanguage = InputLanguage.DefaultInputLanguage;
            }
        }

        private void spreadSheetLog_CellValueChanged(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex == -1) return;

            if (e.ColumnIndex == -1) return;

            if (spreadSheetLog[e.ColumnIndex, e.RowIndex].Value is Age)
            {
                Age age = (Age)spreadSheetLog[e.ColumnIndex, e.RowIndex].Value;
                if (age.HasGain)
                {
                    spreadSheetLog[e.ColumnIndex, e.RowIndex].Style.Padding = new Padding(0, 0, 2, 0);
                }
                else
                {
                    spreadSheetLog[e.ColumnIndex, e.RowIndex].Style.Padding = new Padding(0, 0, 8, 0);
                }
            }

            if (e.ColumnIndex == ColumnMaturity.Index && spreadSheetLog[e.ColumnIndex, e.RowIndex].Value != null)
            {
                int maturity = (int)spreadSheetLog[e.ColumnIndex, e.RowIndex].Value;
                if (maturity > 6 || maturity < 1)
                {
                    spreadSheetLog[e.ColumnIndex, e.RowIndex].Value = null;
                }
            }

            if (spreadSheetLog.ContainsFocus)
            {
                ClearEmptyRows();
                IsChanged = true;
            }

            if (double.IsNaN(DetailedMass) && UserSettings.AutoDecreaseBio &&
                UserSettings.AutoIncreaseBio)
            {
                Mass = double.NaN;
            }
            else
            {
                numericUpDownMass.Enabled = true;
            }

            UpdateTotals();
        }

        private void spreadSheetLog_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            Clear(e.Row);
            IsChanged = true;
        }

        private void spreadSheetLog_RowRemoving(object sender, DataGridViewRowEventArgs e)
        {
            Clear(e.Row);
        }

        private void spreadSheetLog_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Right)
            {
                SelectedColumn = spreadSheetLog.Columns[spreadSheetLog.HitTest(e.X, e.Y).ColumnIndex];
            }
        }

        private void spreadSheetLog_ColumnRenamed(object sender, Mathematics.GridColumnRenameEventArgs e)
        {
            Data.VariableRow variableRow = ((Data)LogRow.Table.DataSet).Variable.FindByVarName(e.PreviousCaption);

            if (variableRow != null)
            {
                variableRow.Variable = e.Column.HeaderText;
            }

            IsChanged = true;
        }

        #endregion

        #region Individual menu

        private void contextMenuStripInd_Opening(object sender, CancelEventArgs e)
        {
            ToolStripMenuItemPaste.Enabled = Clipboard.ContainsText() &&
                Data.ContainsIndividuals(Clipboard.GetText());
        }

        private void ToolStripMenuItemInd_Click(object sender, EventArgs e)
        {
            spreadSheetLog.EndEdit();

            foreach (DataGridViewRow gridRow in spreadSheetLog.SelectedRows)
            {
                if (gridRow.IsNewRow) continue;
                
                OpenIndividual(gridRow);
            }
        }

        private void ToolStripMenuItemIndPrint_Click(object sender, EventArgs e)
        {
            spreadSheetLog.EndEdit();

            Report Report = new Mayfly.Report(FisheryStock.Resources.Interface.IndividualCaption);
            Data.SetHeaderFooter(Report, LogRow.CardRow);
            foreach (DataGridViewRow gridRow in spreadSheetLog.SelectedRows)
            {
                if (gridRow.IsNewRow) continue;
                Report.StartSheet();
                Report.WriteLine("<h1>{0}</h1>", FisheryStock.Resources.Interface.IndividualCaption);
                Data.AddHTMLIndividual(Report, IndividualRow(gridRow));
                Report.CloseDiv();
            }

            Report.Act(this);
        }

        private void ToolStripMenuItemCut_Click(object sender, EventArgs e)
        {
            ToolStripMenuItemCopy_Click(sender, e);
            ToolStripMenuItemDelete_Click(sender, e);
        }

        private void ToolStripMenuItemCopy_Click(object sender, EventArgs e)
        {
            Data clipData = new Data();

            Data.CardRow clipCardRow = clipData.Card.NewCardRow();
            clipData.Card.AddCardRow(clipCardRow);

            Data.SpeciesRow clipSpeciesRow = clipData.Species.NewSpeciesRow();
            clipData.Species.AddSpeciesRow(clipSpeciesRow);

            Data.LogRow clipLogRow = clipData.Log.NewLogRow();
            clipLogRow.CardRow = clipCardRow;
            clipLogRow.SpeciesRow = clipSpeciesRow;
            clipData.Log.AddLogRow(clipLogRow);

            foreach (DataGridViewRow gridRow in spreadSheetLog.SelectedRows)
            {
                if (gridRow.IsNewRow) continue;

                if (gridRow.Cells[ColumnID.Index].Value == null)
                {
                    SaveIndividualRow(clipData, clipLogRow, gridRow);
                }
                else
                {
                    Data.IndividualRow individualRow = Data.Individual.FindByID((int)gridRow.Cells[ColumnID.Index].Value);

                    if (individualRow != null)
                    {
                        Data.IndividualRow newIndividualRow = Data.CopyIndividualData(individualRow, clipLogRow);
                        SaveAddtValues(clipData, newIndividualRow, gridRow);
                    }
                }
            }

            Clipboard.SetText(clipData.GetXml());
        }

        private void ToolStripMenuItemPaste_Click(object sender, EventArgs e)
        {
            Data clipData = Data.FromClipboard();

            // If clipData contains Deep tables then insert data and rows 
            // otherwise insert just rows

            foreach (Data.VariableRow clipVariableRow in clipData.Variable.Rows)
            {
                spreadSheetLog.InsertColumn(clipVariableRow.Variable);
            }

            foreach (Data.IndividualRow clipIndividualRow in clipData.Individual)
            {
                InsertIndividualRow(clipIndividualRow);
            }

            IsChanged = true;
            UpdateTotals();
            Clipboard.Clear();
        }

        private void ToolStripMenuItemDelete_Click(object sender, EventArgs e)
        {
            int rowsToDelete = spreadSheetLog.SelectedRows.Count;
            while (rowsToDelete > 0)
            {
                Clear(spreadSheetLog.SelectedRows[0]);
                spreadSheetLog.Rows.Remove(spreadSheetLog.SelectedRows[0]);
                rowsToDelete--;
            }

            IsChanged = true;
            UpdateTotals();
        }

        #endregion

        #region Stratified logics

        private void Range_ValueChanged(object sender, EventArgs e)
        {
            UpdateTotals();
            IsChanged = true;
        }

        #endregion

        #region Column menu

        private void contextMenuStripVar_Opening(object sender, CancelEventArgs e)
        {
            SelectedColumn = spreadSheetLog.Columns[spreadSheetLog.HitTest(MousePosition.X, MousePosition.Y).ColumnIndex];
            ToolStripMenuItemRemove.Enabled = ToolStripMenuItemRename.Enabled =
               AdditionalColumns.Contains(SelectedColumn);
        }

        private void ToolStripMenuItemRename_Click(object sender, EventArgs e)
        {
            spreadSheetLog.SetRenaming(SelectedColumn);
        }

        private void ToolStripMenuItemRemove_Click(object sender, EventArgs e)
        {
            Width -= SelectedColumn.Width;
            spreadSheetLog.Columns.Remove(SelectedColumn);

            Data.VariableRow variableRow = Data.Variable.FindByVarName(SelectedColumn.HeaderText);
            if (variableRow != null)
            {
                for (int i = 0; i < Data.Value.Count; i++)
                {
                    Data.ValueRow valueRow = Data.Value[i];
                    if (valueRow.VariableRow == variableRow &&
                        valueRow.IndividualRow.LogRow == LogRow)
                    {
                        valueRow.Delete();
                        i--;
                    }
                }
            }

            IsChanged = true;
        }

        private void ToolStripMenuItemClearColumn_Click(object sender, EventArgs e)
        {
            Clear(SelectedColumn);
            IsChanged = true;
        }

        private void ToolStripMenuItemSaveVars_Click(object sender, EventArgs e)
        {
            UserSettings.AddtVariables = AdditionalVariables;
            AddVariableMenuItems();
            UserSettings.CurrentVariables = CurrentVariables;
        }

        #endregion

        private void buttonOK_Click(object sender, EventArgs e)
        {
            ToolStripMenuItemSaveVars_Click(sender, e);

            ChangesWereMade |= IsChanged;
            SaveData();
            DialogResult = DialogResult.OK;
            Close();
        }

        private void textBoxComments_TextChanged(object sender, EventArgs e)
        {
            IsChanged = true;
        }

        private void Individuals_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (DialogResult != DialogResult.OK &&
                (IsThereUnsavedIndividuals || IsChanged))
            {
                TaskDialogButton b = taskDialogSave.ShowDialog(this);

                if (b == tdbSaveAllIndividuals)
                {
                    SaveData();
                    DialogResult = DialogResult.OK;
                    ChangesWereMade = true;
                }
                else if (b == tdbDiscard)
                {

                }
                else if (b == tdbCancelClose)
                {
                    e.Cancel = true;
                }
            }
        }

        private void buttonReport_Click(object sender, EventArgs e)
        {
            SaveData();

            Report report = new Mayfly.Report((string)new ResourceManager(typeof(Card)).GetObject("labelLog.Text"));
            Data.SetHeaderFooter(report, LogRow.CardRow);
            Data.AddHTMLIndividuals(report, LogRow);

            report.Click(buttonReport);
        }

        private void buttonBlank_Click(object sender, EventArgs e)
        {
            Data.BlankIndividuals.Click(buttonBlank);
        }

        #endregion
    }
}
