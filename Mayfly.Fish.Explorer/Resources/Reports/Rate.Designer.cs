//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Mayfly.Fish.Explorer.Resources.Reports {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Rate {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Rate() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Mayfly.Fish.Explorer.Resources.Reports.Rate", typeof(Rate).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gear type.
        /// </summary>
        internal static string Column1_1 {
            get {
                return ResourceManager.GetString("Column1_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gear type classes (meshes).
        /// </summary>
        internal static string Column1_2 {
            get {
                return ResourceManager.GetString("Column1_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Row width (max to min ratio).
        /// </summary>
        internal static string Column1_3 {
            get {
                return ResourceManager.GetString("Column1_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Range width rate (W).
        /// </summary>
        internal static string Column1_4 {
            get {
                return ResourceManager.GetString("Column1_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mean mesh pace (P).
        /// </summary>
        internal static string Column1_5 {
            get {
                return ResourceManager.GetString("Column1_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mesh frequency factor (F).
        /// </summary>
        internal static string Column1_6 {
            get {
                return ResourceManager.GetString("Column1_6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gathering rate (G).
        /// </summary>
        internal static string Column1_7 {
            get {
                return ResourceManager.GetString("Column1_7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Inclusiveness (I).
        /// </summary>
        internal static string Column2_1 {
            get {
                return ResourceManager.GetString("Column2_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Growth model.
        /// </summary>
        internal static string Column2_2 {
            get {
                return ResourceManager.GetString("Column2_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Weight model.
        /// </summary>
        internal static string Column2_3 {
            get {
                return ResourceManager.GetString("Column2_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Species rate (T).
        /// </summary>
        internal static string Column2_4 {
            get {
                return ResourceManager.GetString("Column2_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Runouts fraction (b).
        /// </summary>
        internal static string Column2_5 {
            get {
                return ResourceManager.GetString("Column2_5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на r&lt;sup&gt;2&lt;/sup&gt;.
        /// </summary>
        internal static string Column2_6 {
            get {
                return ResourceManager.GetString("Column2_6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на is runouts fraction.
        /// </summary>
        internal static string EquationB {
            get {
                return ResourceManager.GetString("EquationB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на mesh.
        /// </summary>
        internal static string EquationMesh {
            get {
                return ResourceManager.GetString("EquationMesh", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на , where.
        /// </summary>
        internal static string EquationWhere {
            get {
                return ResourceManager.GetString("EquationWhere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Rate (R) is calculated as a product of gathering rate (G) and treatment rate (T):.
        /// </summary>
        internal static string Paragraph1_1 {
            get {
                return ResourceManager.GetString("Paragraph1_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Finally, total rate is calculated as:.
        /// </summary>
        internal static string Paragraph1_2 {
            get {
                return ResourceManager.GetString("Paragraph1_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gathering rate assumed 1 for gear types except passive ones and equals mean between average mesh row width (W) and frequency (F) factors for passive ones:.
        /// </summary>
        internal static string Paragraph2_1 {
            get {
                return ResourceManager.GetString("Paragraph2_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Row width (W) is calculated as a remain of minimal to maximal mesh size ratio divided 0.9 (which is limit to that ratio):.
        /// </summary>
        internal static string Paragraph2_2 {
            get {
                return ResourceManager.GetString("Paragraph2_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Mesh frequency (F) is calculated from mean pace of mesh size (P) as follows:.
        /// </summary>
        internal static string Paragraph2_3 {
            get {
                return ResourceManager.GetString("Paragraph2_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Finally, gathering rates are following:.
        /// </summary>
        internal static string Paragraph2_4 {
            get {
                return ResourceManager.GetString("Paragraph2_4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Treatment rate (T) of species depends on length measurement inclusiveness (I), growth (g) and weight (w) models quality by following equation:.
        /// </summary>
        internal static string Paragraph3_1 {
            get {
                return ResourceManager.GetString("Paragraph3_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Inclusiveness (I) is part of sample was being measured. Model quality is calculated when last is available. It (Q) is calculated as square root of model&apos;s determination multiplied by remain of deviatons fraction:.
        /// </summary>
        internal static string Paragraph3_2 {
            get {
                return ResourceManager.GetString("Paragraph3_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gathering rate calculation.
        /// </summary>
        internal static string Table1 {
            get {
                return ResourceManager.GetString("Table1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Treatment rate calculation.
        /// </summary>
        internal static string Table2 {
            get {
                return ResourceManager.GetString("Table2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Data Rating Report.
        /// </summary>
        internal static string Title {
            get {
                return ResourceManager.GetString("Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Gathering Rating.
        /// </summary>
        internal static string TitleG {
            get {
                return ResourceManager.GetString("TitleG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Treatment Rating.
        /// </summary>
        internal static string TitleT {
            get {
                return ResourceManager.GetString("TitleT", resourceCulture);
            }
        }
    }
}
