<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="EquationB" xml:space="preserve">
    <value>- доля выбросов</value>
  </data>
  <data name="EquationMesh" xml:space="preserve">
    <value>ячея</value>
  </data>
  <data name="EquationWhere" xml:space="preserve">
    <value>, где</value>
  </data>
  <data name="Paragraph2_3" xml:space="preserve">
    <value>Частота ячей (F) рассчитана на основе среднего шага ячеи (P) по следующему уравнению:</value>
  </data>
  <data name="Paragraph2_1" xml:space="preserve">
    <value>Оценка за сбор материала (G) рассчитана на основе средней ширины ячейного ряда (W) и фактора частоты (F) для пассивных типов орудий лова. Данные из активных орудий лова получают оценку 1.</value>
  </data>
  <data name="TitleG" xml:space="preserve">
    <value>Оценка за сбор материала</value>
  </data>
  <data name="Column1_1" xml:space="preserve">
    <value>Тип орудий</value>
  </data>
  <data name="Column1_2" xml:space="preserve">
    <value>Классы орудий (ячея)</value>
  </data>
  <data name="Column1_3" xml:space="preserve">
    <value>Ширина ряда (отношение max к min)</value>
  </data>
  <data name="Column1_4" xml:space="preserve">
    <value>Оценка ширина ряда (W)</value>
  </data>
  <data name="Column1_5" xml:space="preserve">
    <value>Средний шаг ячеи (P)</value>
  </data>
  <data name="Column1_6" xml:space="preserve">
    <value>Фактор частоты (F)</value>
  </data>
  <data name="Column1_7" xml:space="preserve">
    <value>Оценка за сбор (G)</value>
  </data>
  <data name="Column2_1" xml:space="preserve">
    <value>Тотальность (I)</value>
  </data>
  <data name="Column2_2" xml:space="preserve">
    <value>Модель роста</value>
  </data>
  <data name="Column2_3" xml:space="preserve">
    <value>Масс-размерная модель</value>
  </data>
  <data name="Column2_4" xml:space="preserve">
    <value>Оценка вида (T)</value>
  </data>
  <data name="Column2_5" xml:space="preserve">
    <value>Доля выбросов (b)</value>
  </data>
  <data name="Paragraph1_1" xml:space="preserve">
    <value>Оценка (R) рассчитывается ка произведение оценок за сбор (G) и обработку (T):</value>
  </data>
  <data name="Paragraph1_2" xml:space="preserve">
    <value>Общая оценка, таким образом, равна:</value>
  </data>
  <data name="Paragraph2_2" xml:space="preserve">
    <value>Ширина ряда (W) равна остатку от отношения минимального к максимальному размеру ячеи, деленному на 0,9 (предел для такого отношения):</value>
  </data>
  <data name="Paragraph2_4" xml:space="preserve">
    <value>Оценка за сбор материала, таким образом, составила:</value>
  </data>
  <data name="Paragraph3_1" xml:space="preserve">
    <value>Оценка за обработку (T) выборки вида включает тотальность промеров (I), качество модели роста (g) и размерно-массовой модели (w) в следующем порядке:</value>
  </data>
  <data name="Paragraph3_2" xml:space="preserve">
    <value>Тотальность (I) - доля выборки, которая была промерена. Качество моделей тогда, когда они доступны. Равняется оно (Q) квадратному корню из произведения коэффициента детерминации и остатка от доли выбросов (т. е. доли данных, более или менее укладывающихся в модель):</value>
  </data>
  <data name="Table1" xml:space="preserve">
    <value>Расчет оценки за сбор</value>
  </data>
  <data name="Table2" xml:space="preserve">
    <value>Расчет оценки за обработку</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Отчет по оценке данных</value>
  </data>
  <data name="TitleT" xml:space="preserve">
    <value>Оценка за обработку материала</value>
  </data>
</root>